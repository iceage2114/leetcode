class TrieNode:
    def __init__(self):
        self.children = {}
        self.endOfWord = False

class Trie:
    def __init__(self):
        self.root = TrieNode()
    
    def insert(self, word):
        current = self.root

        for c in word:
            if c not in current.children:
                current.children[c] = TrieNode()
            current = current.children[c]
        current.endOfWord = True
    
    def search(self, word):
        current = self.root

        for c in word:
            if c not in current.children:
                return False
            current = current.children[c]

        return current.endOfWord 
    
    def startsWith(self, prefix):
        current = self.root

        for c in prefix:
            if c not in current.children:
                return False

            current = current.children[c]
        return True

    def printTrie(self):
        current = self.root
        print(current.children)


        
    
trie = Trie()
trie.insert("apple")
print(trie.search("apple"))
print(trie.search("app"))
print(trie.startsWith("app"))
trie.insert("app")
print(trie.search("app"))
trie.insert("bat")
trie.printTrie()

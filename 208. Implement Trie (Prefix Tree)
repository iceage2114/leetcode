class TrieNode:
    def __init__(self):
        self.children = [None] * 26
        self.isWord = False

class Trie:
    def __init__(self):
        self.root = TrieNode()
    
    def insert(self, word):
        current = self.root
        for c in word:
            index = ord(c) - ord('a')
            if current.children[index] is None:
                current.children[index] = TrieNode()
            current = current.children[index]
        current.isWord = True
    
    def search(self, word):
        node = self.getNode(word)
        return node is not None and node.isWord
    
    def startsWith(self, prefix):
        return self.getNode(prefix) is not None
    
    def getNode(self, word):
        current = self.root
        for c in word:
            index = ord(c) - ord('a')
            if current.children[index] is None:
                return None
            current = current.children[index]
        return current

trie = Trie()
trie.insert("apple")
print(trie.search("apple"))
print(trie.search("app"))
print(trie.startsWith("app"))
trie.insert("app")
print(trie.search("app"))

from collections import deque
class TreeNode(object):
     def __init__(self, val=0, left=None, right=None):
         self.val = val
         self.left = left
         self.right = right
         
def buildTree(preorder, inorder):
    if len(preorder) == 1:
        return [preorder[0]]
    
    rootVal = preorder[0]

    left = []
    count = 0
    for i in range(len(inorder)):
        if inorder[i] == rootVal:
            count = i
            break

    #left = [:count]
    #right = [count + 1:]

    root = TreeNode(3)

def build(preorder, inorder):
    if inorder:
        index = inorder.index(preorder.popleft())
        root = TreeNode(inorder[index])

        root.left = build(preorder, inorder[:index])
        root.right = build(preorder, inorder[index + 1:])

        return root

def buildTree2(preorder, inorder):
    preorder = deque(preorder)
    return build(preorder, inorder)
    

    
def preorderPrint(node, array):
    if node:
        array.append(node.val)
        preorderPrint(node.left, array)
        preorderPrint(node.right, array)


def inorderPrint(node, array):
    if node:
        inorderPrint(node.left, array)
        array.append(node.val)
        inorderPrint(node.right, array)

def postorderPrint(root, array):
    if root:
        postorderPrint(root.left, array)
        postorderPrint(root.right, array)
        array.append(root.val)

root = TreeNode(4)
root.left = TreeNode(2)
root.right = TreeNode(6)
root.left.left = TreeNode(1)
root.left.right = TreeNode(3)
root.right.right = TreeNode(7)
root.right.left = TreeNode(5)

post = []
pre = []
ino = []

preorderPrint(root, pre)
postorderPrint(root, post)
inorderPrint(root, ino)

print(f"preorder = {pre}")
print(f"postorder = {post}")
print(f"inorder = {ino}")


preorder = [5,4,2,3,1,6]
inorder = [2,4,5,1,3,6]

root2 = buildTree2(preorder, inorder)

def buildPostInorder(postorder, inorder):
    if inorder:
        index = inorder.index(postorder.pop())
        
        root = TreeNode(inorder[index])

        root.right = buildPostInorder(postorder, inorder[index + 1:])
        root.left = buildPostInorder(postorder, inorder[:index])
        

        return root

postOrder1 = [1, 3, 2, 5, 7, 6, 4]
inorder1 = [1, 2, 3, 4, 5, 6, 7]
root3 = buildPostInorder(postOrder1, inorder1)
ino2 = []
inorderPrint(root3, ino2)
print(f"post = {ino2}")

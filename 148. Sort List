class ListNode(object):
     def __init__(self, val=0, next=None):
         self.val = val
         self.next = next
         
def sortList(head):
    if not head or not head.next:
        return head
    
    middle = getMiddle(head)
    nextOfMiddle = middle.next
    middle.next = None
    
    left = sortList(head)
    right = sortList(nextOfMiddle)
    
    sortedList = self.merge(left, right)
    return sortedList

def getMiddle(head):
    if not head:
        return None
    
    slow = head
    fast = head
    
    while fast.next and fast.next.next:
        slow = slow.next
        fast = fast.next.next
    
    return slow

def merge(left, right):
    dummy = ListNode(0)
    current = dummy
    
    while left and right:
        if left.val <= right.val:
            current.next = left
            left = left.next
        else:
            current.next = right
            right = right.next
        current = current.next
    
    if left:
        current.next = left
    if right:
        current.next = right
    
    return dummy.next

    
